generator client { 
  provider = "prisma-client-js" 
} 
 
datasource db { 
  provider = "postgresql" 
  url      = env("DATABASE_URL") 
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String
  profile   UserProfile?
  roles     Role[]   @default([USER])
  articles  Artikel[] // Ubah menjadi hubungan banyak-ke-banyak
  ratings   Rating[]
  savedArtikels SavedArtikel[]
  reports   Report[]
}


model UserProfile { 
  id              Int      @id @default(autoincrement()) 
  first_name      String 
  last_name       String?
  profile_picture String? 
  no_hp           String 
  status          String
  pictureId       String?  @unique
  user            User     @relation(fields: [userId], references: [id]) 
  userId          Int      @unique 
} 

model Artikel {
  id             Int       @id @default(autoincrement())
  judul          String
  deskripsi      String
  link           String
  gambar_artikel String  @unique
  fileId         String? @unique
  kategori       Kategori @relation(fields: [kategoriId], references: [id])
  kategoriId     Int
  author         User     @relation(fields: [authorId], references: [id])
  authorId       Int
  ratings        Rating[]
  reports        Report[]
  savedArtikels  SavedArtikel[]   // Add the opposite relation field here
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Kategori { 
  id       Int       @id @default(autoincrement()) 
  nama     String 
  deskripsi String? 
  articles Artikel[] 
} 

model Rating {
  id        Int     @id @default(autoincrement())
  nilai     Int
  artikel   Artikel @relation(fields: [artikelId], references: [id])
  artikelId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
}

model Report {
  id        Int     @id @default(autoincrement())
  alasan    String
  artikel   Artikel @relation(fields: [artikelId], references: [id])
  artikelId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
}

model SavedArtikel {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  artikelId Int
  artikel  Artikel  @relation(fields: [artikelId], references: [id])

  @@unique([userId, artikelId])
}

// Enum untuk Role User
enum Role {
  ADMIN
  USER
  SUPERADMIN
}
